// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: assets.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const insertAsset = `-- name: InsertAsset :one
INSERT INTO assets (
  user_id, kind, request_id, derived_from_asset_id, storage_key,
  mime, bytes, width, height, aspect_ratio, hash_sha256, metadata
)
VALUES ($1,$2,$3,$4,$5,$6,$7,$8,$9,$10,$11,$12)
RETURNING id, user_id, kind, request_id, derived_from_asset_id, storage_key, mime, bytes, width, height, aspect_ratio, hash_sha256, metadata, created_at
`

type InsertAssetParams struct {
	UserID             uuid.UUID
	Kind               string
	RequestID          uuid.NullUUID
	DerivedFromAssetID uuid.NullUUID
	StorageKey         string
	Mime               string
	Bytes              int64
	Width              sql.NullInt32
	Height             sql.NullInt32
	AspectRatio        sql.NullString
	HashSha256         sql.NullString
	Metadata           json.RawMessage
}

// sql 4c2a1a9e-1b77-4b8e-a1d2-9a7b2c3d4e5f
func (q *Queries) InsertAsset(ctx context.Context, arg InsertAssetParams) (Asset, error) {
	row := q.db.QueryRow(ctx, insertAsset,
		arg.UserID,
		arg.Kind,
		arg.RequestID,
		arg.DerivedFromAssetID,
		arg.StorageKey,
		arg.Mime,
		arg.Bytes,
		arg.Width,
		arg.Height,
		arg.AspectRatio,
		arg.HashSha256,
		arg.Metadata,
	)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Kind,
		&i.RequestID,
		&i.DerivedFromAssetID,
		&i.StorageKey,
		&i.Mime,
		&i.Bytes,
		&i.Width,
		&i.Height,
		&i.AspectRatio,
		&i.HashSha256,
		&i.Metadata,
		&i.CreatedAt,
	)
	return i, err
}

const listAssetsByUser = `-- name: ListAssetsByUser :many
SELECT id, kind, request_id, storage_key, mime, bytes, created_at
FROM assets
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT COALESCE($2::int, 50)
`

type ListAssetsByUserParams struct {
	UserID  uuid.UUID
	Column2 int32
}

type ListAssetsByUserRow struct {
	ID         uuid.UUID
	Kind       string
	RequestID  uuid.NullUUID
	StorageKey string
	Mime       string
	Bytes      int64
	CreatedAt  time.Time
}

// sql 9a1b2c3d-4e5f-6a7b-8c9d-0e1f2a3b4c5d
func (q *Queries) ListAssetsByUser(ctx context.Context, arg ListAssetsByUserParams) ([]ListAssetsByUserRow, error) {
	rows, err := q.db.Query(ctx, listAssetsByUser, arg.UserID, arg.Column2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAssetsByUserRow
	for rows.Next() {
		var i ListAssetsByUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Kind,
			&i.RequestID,
			&i.StorageKey,
			&i.Mime,
			&i.Bytes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
