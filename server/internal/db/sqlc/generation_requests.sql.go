// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: generation_requests.sql

package db

import (
	"context"
	"database/sql"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const claimNextQueuedJob = `-- name: ClaimNextQueuedJob :one
WITH next AS (
  SELECT id
  FROM generation_requests
  WHERE status = 'QUEUED'
  ORDER BY created_at
  FOR UPDATE SKIP LOCKED
  LIMIT 1
)
UPDATE generation_requests gr
SET status='RUNNING', started_at=now()
FROM next
WHERE gr.id = next.id
RETURNING gr.id, gr.user_id, gr.provider, gr.model, gr.prompt_json, gr.source_asset_id
`

type ClaimNextQueuedJobRow struct {
	ID            uuid.UUID
	UserID        uuid.UUID
	Provider      string
	Model         string
	PromptJson    json.RawMessage
	SourceAssetID uuid.NullUUID
}

// sql 8c01c6e6-1f8e-4f61-9e2d-6040d7cf24af
func (q *Queries) ClaimNextQueuedJob(ctx context.Context) (ClaimNextQueuedJobRow, error) {
	row := q.db.QueryRowContext(ctx, claimNextQueuedJob)
	var i ClaimNextQueuedJobRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Provider,
		&i.Model,
		&i.PromptJson,
		&i.SourceAssetID,
	)
	return i, err
}

const enqueueGeneration = `-- name: EnqueueGeneration :one
INSERT INTO generation_requests (
  user_id, task_type, provider, model, source_asset_id,
  prompt_json, aspect_ratio, quantity, status
)
VALUES ($1, $2, $3, $4, $5, $6, $7, LEAST($8, 2), 'QUEUED')
RETURNING id, user_id, task_type, provider, model, source_asset_id, prompt_json, aspect_ratio, quantity, status, progress, error_code, error_message, started_at, finished_at, created_at
`

type EnqueueGenerationParams struct {
	UserID        uuid.UUID
	TaskType      string
	Provider      string
	Model         string
	SourceAssetID uuid.NullUUID
	PromptJson    json.RawMessage
	AspectRatio   string
	Column8       interface{}
}

// sql 6e7e8d2a-8d3f-4a1b-9a55-44f6c6f6f2f1
func (q *Queries) EnqueueGeneration(ctx context.Context, arg EnqueueGenerationParams) (GenerationRequest, error) {
	row := q.db.QueryRowContext(ctx, enqueueGeneration,
		arg.UserID,
		arg.TaskType,
		arg.Provider,
		arg.Model,
		arg.SourceAssetID,
		arg.PromptJson,
		arg.AspectRatio,
		arg.Column8,
	)
	var i GenerationRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TaskType,
		&i.Provider,
		&i.Model,
		&i.SourceAssetID,
		&i.PromptJson,
		&i.AspectRatio,
		&i.Quantity,
		&i.Status,
		&i.Progress,
		&i.ErrorCode,
		&i.ErrorMessage,
		&i.StartedAt,
		&i.FinishedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getRequestStatus = `-- name: GetRequestStatus :one
SELECT id, status, progress, error_code, error_message,
       prompt_json->>'style' AS style,
       created_at, started_at, finished_at
FROM generation_requests
WHERE id = $1
`

type GetRequestStatusRow struct {
	ID           uuid.UUID
	Status       string
	Progress     int32
	ErrorCode    sql.NullString
	ErrorMessage sql.NullString
	Style        interface{}
	CreatedAt    time.Time
	StartedAt    sql.NullTime
	FinishedAt   sql.NullTime
}

// sql 2fa8b4d9-7c2f-4b90-b2a3-1d6f5b2c2b9a
func (q *Queries) GetRequestStatus(ctx context.Context, id uuid.UUID) (GetRequestStatusRow, error) {
	row := q.db.QueryRowContext(ctx, getRequestStatus, id)
	var i GetRequestStatusRow
	err := row.Scan(
		&i.ID,
		&i.Status,
		&i.Progress,
		&i.ErrorCode,
		&i.ErrorMessage,
		&i.Style,
		&i.CreatedAt,
		&i.StartedAt,
		&i.FinishedAt,
	)
	return i, err
}
