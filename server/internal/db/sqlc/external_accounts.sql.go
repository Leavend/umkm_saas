// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: external_accounts.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getGoogleAccountByUser = `-- name: GetGoogleAccountByUser :one
SELECT id, access_token, refresh_token, expires_at, scopes
FROM external_accounts
WHERE user_id = $1 AND provider = 'google'
LIMIT 1
`

type GetGoogleAccountByUserRow struct {
	ID           uuid.UUID
	AccessToken  sql.NullString
	RefreshToken sql.NullString
	ExpiresAt    sql.NullTime
	Scopes       []string
}

// sql 7a8b9c0d-1e2f-3a4b-5c6d-7e8f9a0b1c2d
func (q *Queries) GetGoogleAccountByUser(ctx context.Context, userID uuid.UUID) (GetGoogleAccountByUserRow, error) {
	row := q.db.QueryRowContext(ctx, getGoogleAccountByUser, userID)
	var i GetGoogleAccountByUserRow
	err := row.Scan(
		&i.ID,
		&i.AccessToken,
		&i.RefreshToken,
		&i.ExpiresAt,
		pq.Array(&i.Scopes),
	)
	return i, err
}
